# roc curve and auc
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from matplotlib import pyplot
import csv

# generate 2 class dataset
X, y = make_classification(n_samples=1000, n_classes=2, random_state=1)
# split into train/test sets
trainX, testX, trainy, testy = train_test_split(X,
                                                y,
                                                test_size=0.5,
                                                random_state=2)
# generate a no skill prediction (majority class)
ns_probs = [0 for _ in range(len(testy))]
# fit a model
model = LogisticRegression(solver='lbfgs')
model.fit(trainX, trainy)
score_knn = []
score_hsv = []
valid = []
testy = []

# fakes
with open('progan_result/scores.csv') as csvfile:
    scorereader = csv.reader(csvfile, delimiter=',', quotechar='|')
    first = True
    for row in scorereader:
        if not first and float(row[3]) == 1.0:
            score_knn.append(float(row[1]))
            score_hsv.append(float(row[2]))
            valid.append(float(row[3]))
            testy.append(1)
        first = False

# reals
with open('celeba_medium_result/scores.csv') as csvfile:
    scorereader = csv.reader(csvfile, delimiter=',', quotechar='|')
    first = True
    for row in scorereader:
        if not first and float(row[3]) == 1.0:
            score_knn.append(float(row[1]))
            score_hsv.append(float(row[2]))
            valid.append(float(row[3]))
            testy.append(0)
        first = False

lr_auc_knn = roc_auc_score(testy, score_knn)
lr_auc_hsv = roc_auc_score(testy, score_hsv)
# summarize scores
print('Logistic: ROC AUC KNN=%.3f' % (lr_auc_knn))
print('Logistic: ROC AUC HSV=%.3f' % (lr_auc_hsv))
# calculate roc curves
lr_fpr_knn, lr_tpr_knn, _ = roc_curve(testy, score_knn)
lr_fpr_hsv, lr_tpr_hsv, _ = roc_curve(testy, score_hsv)
# plot the roc curve for the model
pyplot.plot(lr_fpr_knn, lr_tpr_knn, marker='.', label='KNN')
pyplot.plot(lr_fpr_hsv, lr_tpr_hsv, marker='.', label='HSV')
xy = [float(x) / 100 for x in range(0, 101)]
pyplot.plot(xy, xy, marker='.', label='x=y')
# axis labels
pyplot.xlabel('False Positive Rate')
pyplot.ylabel('True Positive Rate')
# show the legend
pyplot.legend()
# show the plot
pyplot.show()
